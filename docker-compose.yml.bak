version: '3.8'

services:
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  backend:
    image: unigate-backend:latest
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  frontend:
    image: unigate-frontend:latest
    command: pnpm run dev
    volumes:
      - ./frontend:/app
      - /app/node_modules # Garante que node_modules não seja sobrescrito pelo volume
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000/api
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  init_backend:
    image: unigate-backend:latest
    command: >
      sh -c "python manage.py migrate &&
      echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('$DJANGO_SUPERUSER_USERNAME', '$DJANGO_SUPERUSER_EMAIL', '$DJANGO_SUPERUSER_PASSWORD') if not User.objects.filter(username='$DJANGO_SUPERUSER_USERNAME').exists() else print('Superuser already exists')" | python manage.py shell"
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
    deploy:
      replicas: 0 # Este serviço deve ser executado apenas uma vez
      restart_policy:
        condition: none # Não reiniciar após a conclusão
    depends_on:
      - db

volumes:
  postgres_data:
